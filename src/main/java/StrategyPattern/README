第一个设计模式：策略模式

场景：Joe上班的公司做了一套相当成功的模拟鸭子游戏：SimUDuck。游戏中会出现各种鸭子，一边游泳戏水，一遍呱呱叫。
关键在于，鸭子现在会将飞行和呱呱叫的动作"委托"别人处理，而不是使用定义在Duck类（或子类）内的呱呱叫和飞行方法。

设计原则：找到应用中可能需要变化支持，把他们独立出来，不要和那些不需要变化的代码混在一起。

策略模式：分别封装接口，实现算法族，超类离放行为接口对象，在子类里具体设定行为对象。
原则就是：分离变化部分，封装接口，基于接口编程各种功能。此模式让行为算法的变化独立于算法的使用者

